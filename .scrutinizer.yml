tools:
    php_mess_detector:
        config:
            code_size_rules: { cyclomatic_complexity: true, npath_complexity: true, excessive_method_length: true, excessive_class_length: true, excessive_parameter_list: true, excessive_public_count: true, too_many_fields: true, too_many_methods: true, excessive_class_complexity: true }
            design_rules: { number_of_class_children: true, depth_of_inheritance: true, coupling_between_objects: true }
            unused_code_rules: { unused_local_variable: true, unused_private_method: true, unused_formal_parameter: true }
            naming_rules: { short_variable: true, long_variable: true, short_method: true, boolean_method_name: true }
            controversial_rules: { superglobals: false }
    php_cs_fixer:
        config:
            level: custom
            fixers: { indentation: true, unused_use: true, phpdoc_params: true, visibility: true, return: true, short_tag: true, braces: true, include: true, extra_empty_lines: true, controls_spaces: true, elseif: true }
    php_analyzer:
        config:
            parameter_reference_check: { enabled: true }
            checkstyle: { enabled: true, no_trailing_whitespace: true, naming: { enabled: false, local_variable: '^[a-z][a-zA-Z0-9_]*$', abstract_class_name: ^Abstract|Factory$, utility_class_name: 'Utils?$', constant_name: '^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$', property_name: '^[a-z][a-zA-Z0-9]*$', method_name: '^(?:[a-z]|__)[a-zA-Z0-9]*$', parameter_name: '^[a-z][a-zA-Z0-9]*$', interface_name: '^[A-Z][a-zA-Z0-9]*Interface$', type_name: '^[A-Z][a-zA-Z0-9]*$', exception_name: '^[A-Z][a-zA-Z0-9]*Exception$', isser_method_name: '^(?:is|has|should|may|supports)' } }
            unreachable_code: { enabled: true }
            check_access_control: { enabled: true }
            typo_checks: { enabled: true }
            check_variables: { enabled: true }
            check_calls: { enabled: true, too_many_arguments: true, missing_argument: true, argument_type_checks: lenient }
            suspicious_code: { enabled: true, overriding_parameter: true, overriding_closure_use: true, parameter_closure_use_conflict: true, parameter_multiple_times: true, non_existent_class_in_instanceof_check: true, non_existent_class_in_catch_clause: true, assignment_of_null_return: true, non_commented_switch_fallthrough: true, non_commented_empty_catch_block: true, overriding_private_members: true, use_statement_alias_conflict: true, precedence_in_condition_assignment: true }
            dead_assignments: { enabled: true }
            verify_php_doc_comments: { enabled: true, parameters: true, return: true, ask_for_return_if_not_inferrable: true, ask_for_param_type_annotation: true, suggest_more_specific_types: false }
            loops_must_use_braces: { enabled: true }
            check_usage_context: { enabled: true, foreach: { value_as_reference: true, traversable: true } }
            simplify_boolean_return: { enabled: true }
            phpunit_checks: { enabled: true }
            reflection_checks: { enabled: true }
            precedence_checks: { enabled: true, assignment_in_condition: true, comparison_of_bit_result: true }
            basic_semantic_checks: { enabled: true }
            unused_code: { enabled: true }
            deprecation_checks: { enabled: true }
            useless_function_calls: { enabled: true }
            metrics_lack_of_cohesion_methods: { enabled: true }
            metrics_coupling: { enabled: true, stable_code: { namespace_prefixes: {  }, classes: {  } } }
            doctrine_parameter_binding: { enabled: false }
            doctrine_entity_manager_injection: { enabled: false }
            symfony_request_injection: { enabled: false }
            doc_comment_fixes: { enabled: true }
            reflection_fixes: { enabled: true }
            use_statement_fixes: { enabled: true, remove_unused: true, preserve_multiple: false, preserve_blanklines: false, order_alphabetically: false }
    php_code_sniffer:
        config:
            sniffs: { psr1: { classes: { class_declaration_sniff: true }, files: { side_effects_sniff: false } }, generic: { code_analysis: { unused_function_parameter_sniff: true, unconditional_if_statement_sniff: true, for_loop_should_be_while_loop_sniff: true }, classes: { duplicate_class_name_sniff: true }, white_space: { disallow_tab_indent_sniff: true, scope_indent_sniff: true }, php: { disallow_short_open_tag_sniff: true, no_silenced_errors_sniff: true, forbidden_functions_sniff: true, lower_case_constant_sniff: true, character_before_php_opening_tag_sniff: false }, formatting: { no_space_after_cast_sniff: true }, functions: { opening_function_brace_bsd_allman_sniff: true }, files: { byte_order_mark_sniff: true }, commenting: { fixme_sniff: true, todo_sniff: true }, control_structures: { inline_control_structure_sniff: true }, strings: { unnecessary_string_concat_sniff: true }, naming_conventions: { constructor_name_sniff: true, upper_case_constant_name_sniff: true }, metrics: { cyclomatic_complexity_sniff: true, nesting_level_sniff: true } }, squiz: { scope: { static_this_usage_sniff: false, method_scope_sniff: false, member_var_scope_sniff: false }, classes: { self_member_reference_sniff: false }, php: { non_executable_code_sniff: false } }, my_source: { php: { eval_object_factory_sniff: true } }, psr2: { classes: { property_declaration_sniff: true, class_declaration_sniff: true }, namespaces: { namespace_declaration_sniff: true, use_declaration_sniff: true }, control_structures: { control_structure_spacing_sniff: true, switch_declaration_sniff: true, else_if_declaration_sniff: true } }, pear: { classes: { class_declaration_sniff: true }, white_space: { object_operator_indent_sniff: true, scope_indent_sniff: true, scope_closing_brace_sniff: true }, functions: { function_call_signature_sniff: true, function_declaration_sniff: true, valid_default_value_sniff: true }, files: { including_file_sniff: true }, commenting: { function_comment_sniff: true }, control_structures: { control_signature_sniff: true, multi_line_condition_sniff: true }, naming_conventions: { valid_class_name_sniff: true } } }
    sensiolabs_security_checker: true
    php_cpd: true
    php_loc: true
    php_pdepend: true
    php_sim: true

checks:
    php:
        avoid_unnecessary_concatenation: true
        no_unnecessary_function_call_in_for_loop: true
        prefer_sapi_constant: true
        code_rating: true
        remove_trailing_whitespace: true
        remove_extra_empty_lines: true
        fix_php_opening_tag: true
        fix_linefeed: true
        fix_line_ending: true
        fix_identation_4spaces: true
        fix_doc_comments: true
        sql_injection_vulnerabilities: true
        remove_php_closing_tag: true
        no_eval: true
        fix_use_statements:
            remove_unused: true
            preserve_multiple: false
            preserve_blanklines: false
            order_alphabetically: false
        security_vulnerabilities: true
        require_php_tag_first: true
        no_mixed_inline_html: true
        no_exit: true
        no_global_keyword: true
        avoid_corrupting_byteorder_marks: true
        php5_style_constructor: true
        deprecated_code_usage: true
        avoid_duplicate_types: true
        useless_calls: true
        unused_properties: true
        unused_parameters: true
        unused_methods: true
        unreachable_code: true
        too_many_arguments: true
        side_effects_or_types: true
        return_doc_comments: true
        return_doc_comment_if_not_inferrable: true
        parameter_doc_comments: true
        param_doc_comment_if_not_inferrable: true
        no_unnecessary_if: true
        no_unnecessary_final_modifier: true
        no_empty_statements: true
        duplication: true
        avoid_useless_overridden_methods: true

